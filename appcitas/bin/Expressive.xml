<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Expressive</name>
    </assembly>
    <members>
        <member name="T:Expressive.Exceptions.ExpressiveException">
            <summary>
            The main exposed <see cref="T:System.Exception"/> for users of an Expression. Check the InnerException for more information.
            </summary>
        </member>
        <member name="T:Expressive.Exceptions.FunctionNameAlreadyRegisteredException">
            <summary>
            Represents an error that is thrown when registering an <see cref="T:Expressive.Functions.IFunction"/> and the name is already used.
            </summary>
        </member>
        <member name="P:Expressive.Exceptions.FunctionNameAlreadyRegisteredException.Name">
            <summary>
            Gets the name of the function already used.
            </summary>
        </member>
        <member name="M:Expressive.Exceptions.FunctionNameAlreadyRegisteredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Expressive.Exceptions.FunctionNameAlreadyRegisteredException"/> class with a specified unrecognised token.
            </summary>
            <param name="name">The name of the function.</param>
        </member>
        <member name="M:Expressive.Exceptions.FunctionNameAlreadyRegisteredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Set the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about this exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Expressive.Exceptions.MissingParticipantException">
            <summary>
            Represents an error that is thrown when one side of an operation is missing inside an <see cref="T:Expressive.Expression"/>.
            </summary>
        </member>
        <member name="M:Expressive.Exceptions.MissingParticipantException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Expressive.Exceptions.MissingParticipantException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Expressive.Exceptions.MissingTokenException">
            <summary>
            Represents an error that is thrown when a missing token is detected inside an <see cref="T:Expressive.Expression"/>.
            </summary>
        </member>
        <member name="P:Expressive.Exceptions.MissingTokenException.MissingToken">
            <summary>
            Gets the token that is missing from the <see cref="T:Expressive.Expression"/>.
            </summary>
        </member>
        <member name="M:Expressive.Exceptions.MissingTokenException.#ctor(System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Expressive.Exceptions.MissingTokenException"/> class with a specified error message and missing token.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="missingToken">The token that is missing.</param>
        </member>
        <member name="M:Expressive.Exceptions.MissingTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Set the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about this exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Expressive.Exceptions.ParameterCountMismatchException">
            <summary>
            Represents an error that is thrown when a function has an incorrect number of parameters.
            </summary>
        </member>
        <member name="M:Expressive.Exceptions.ParameterCountMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Expressive.Exceptions.ParameterCountMismatchException"/> class with a specified error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Expressive.Exceptions.UnrecognisedTokenException">
            <summary>
            Represents an error that is thrown when a token is not recognised inside an <see cref="T:Expressive.Expression"/>.
            </summary>
        </member>
        <member name="P:Expressive.Exceptions.UnrecognisedTokenException.Token">
            <summary>
            Gets the unrecognised token in the <see cref="T:Expressive.Expression"/>.
            </summary>
        </member>
        <member name="M:Expressive.Exceptions.UnrecognisedTokenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Expressive.Exceptions.UnrecognisedTokenException"/> class with a specified unrecognised token.
            </summary>
            <param name="token">The unrecognised token.</param>
        </member>
        <member name="M:Expressive.Exceptions.UnrecognisedTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Set the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about this exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Expressive.Expression">
            <summary>
            Class definition for an Expression that can be evaluated.
            </summary>
        </member>
        <member name="P:Expressive.Expression.ReferencedVariables">
            <summary>
            Gets a list of the Variable names that are contained within this Expression.
            </summary>
        </member>
        <member name="M:Expressive.Expression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Expressive.Expression"/> class with no options.
            </summary>
            <param name="expression">The expression to be evaluated.</param>
        </member>
        <member name="M:Expressive.Expression.#ctor(System.String,Expressive.ExpressiveOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Expressive.Expression"/> class with the specified options.
            </summary>
            <param name="expression">The expression to be evaluated.</param>
            <param name="options">The options to use when evaluating.</param>
        </member>
        <member name="M:Expressive.Expression.Evaluate">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <exception cref="T:Expressive.Exceptions.ExpressiveException">Thrown when there is a break in the evaluation process, check the InnerException for further information.</exception>
            <returns>The result of the expression.</returns>
        </member>
        <member name="M:Expressive.Expression.Evaluate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Evaluates the expression using the supplied variables and returns the result.
            </summary>
            <exception cref="T:Expressive.Exceptions.ExpressiveException">Thrown when there is a break in the evaluation process, check the InnerException for further information.</exception>
            <param name="variables">The variables to be used in the evaluation.</param>
            <returns>The result of the expression.</returns>
        </member>
        <member name="M:Expressive.Expression.EvaluateAsync(System.Action{System.String,System.Object})">
            <summary>
            Evaluates the expression asynchronously and returns the result via the callback.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the callback is not supplied.</exception>
            <param name="callback">Provides the result once the evaluation has completed.</param>
        </member>
        <member name="M:Expressive.Expression.EvaluateAsync(System.Action{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Evaluates the expression using the supplied variables asynchronously and returns the result via the callback.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the callback is not supplied.</exception>
            <param name="callback">Provides the result once the evaluation has completed.</param>
            <param name="variables">The variables to be used in the evaluation.</param>
        </member>
        <member name="M:Expressive.Expression.RegisterFunction(System.String,System.Func{Expressive.Expressions.IExpression[],System.Collections.Generic.IDictionary{System.String,System.Object},System.Object})">
            <summary>
            Registers a custom function for use in evaluating an expression.
            </summary>
            <param name="functionName">The name of the function (NOTE this is also the tag that will be used to extract the function from an expression).</param>
            <param name="function">The method of evaluating the function.</param>
            <exception cref="T:Expressive.Exceptions.FunctionNameAlreadyRegisteredException">Thrown when the name supplied has already been registered.</exception>
        </member>
        <member name="M:Expressive.Expression.RegisterFunction(Expressive.Functions.IFunction)">
            <summary>
            Registers a custom function inheriting from <see cref="T:Expressive.Functions.IFunction"/> for use in evaluating an expression.
            </summary>
            <param name="function">The <see cref="T:Expressive.Functions.IFunction"/> implementation.</param>
            <exception cref="T:Expressive.Exceptions.FunctionNameAlreadyRegisteredException">Thrown when the name supplied has already been registered.</exception>
        </member>
        <member name="T:Expressive.Expressions.IExpression">
            <summary>
            Interface definition for an expression that can be evaluated.
            </summary>
            <remarks>
            These are exposed as parameters inside a function.
            </remarks>
        </member>
        <member name="M:Expressive.Expressions.IExpression.Evaluate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Forces this <see cref="T:Expressive.Expressions.IExpression"/> to be evaluated.
            </summary>
            <param name="variables">The list of variables for use in evaluating.</param>
            <returns>The result of the <see cref="T:Expressive.Expressions.IExpression"/>.</returns>
        </member>
        <member name="T:Expressive.ExpressiveOptions">
            <summary>
            Options to alter the way in which an <see cref="T:Expressive.Expression"/> is parsed and evaluated.
            </summary>
        </member>
        <member name="F:Expressive.ExpressiveOptions.None">
            <summary>
            Specifies that no options are set.
            </summary>
        </member>
        <member name="F:Expressive.ExpressiveOptions.IgnoreCase">
            <summary>
            Specifies case-insensitive matching.
            </summary>
        </member>
        <member name="F:Expressive.ExpressiveOptions.NoCache">
            <summary>
            No-cache mode. Ingores any pre-compiled expression in the cache.
            </summary>
        </member>
        <member name="F:Expressive.ExpressiveOptions.RoundAwayFromZero">
            <summary>
            When using Round(), if a number is halfway between two others, it is rounded toward the nearest number that is away from zero.
            </summary>
        </member>
        <member name="F:Expressive.ExpressiveOptions.All">
            <summary>
            All options are used.
            </summary>
        </member>
        <member name="M:Expressive.Functions.FunctionBase.ValidateParameterCount(Expressive.Expressions.IExpression[],System.Int32,System.Int32)">
            <summary>
            Validates whether the expected number of parameters are present.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="expectedCount">The expected number of parameters, use -1 for an unknown number.</param>
            <param name="minimumCount">The minimum number of parameters.</param>
            <returns>True if the correct number are present, false otherwise.</returns>
        </member>
        <member name="T:Expressive.Functions.IFunction">
            <summary>
            Interface definition for a Function that can be evaluated.
            </summary>
        </member>
        <member name="P:Expressive.Functions.IFunction.Variables">
            <summary>
            Gets or sets the Variables and their values to be used in evaluating an <see cref="T:Expressive.Expression"/>.
            </summary>
        </member>
        <member name="P:Expressive.Functions.IFunction.Name">
            <summary>
            Gets the name of the Function.
            </summary>
        </member>
        <member name="M:Expressive.Functions.IFunction.Evaluate(Expressive.Expressions.IExpression[],Expressive.ExpressiveOptions)">
            <summary>
            Forces the Function to evaluate itself using the supplied parameters.
            </summary>
            <param name="parameters">The list of parameters inside the Function.</param>
            <param name="options">The evaluation options to be used.</param>
            <returns>The result of the Function.</returns>
        </member>
        <member name="T:Expressive.Operators.IOperator">
            <summary>
            Definition for all Operators (i.e. +, -, etc.) that are available in Expressive.
            </summary>
        </member>
        <member name="P:Expressive.Operators.IOperator.Tags">
            <summary>
            Gets the list of tags that can be used to identify this IOperator.
            </summary>
        </member>
    </members>
</doc>
